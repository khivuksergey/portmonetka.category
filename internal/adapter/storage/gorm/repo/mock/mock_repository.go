// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../../adapter/storage/gorm/repo/mock/mock_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/khivuksergey/portmonetka.category/internal/adapter/storage/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryRepository) CreateCategory(category *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryRepositoryMockRecorder) CreateCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).CreateCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockCategoryRepository) DeleteCategory(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryRepositoryMockRecorder) DeleteCategory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteCategory), id)
}

// ExistsWithName mocks base method.
func (m *MockCategoryRepository) ExistsWithName(userId uint64, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsWithName", userId, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsWithName indicates an expected call of ExistsWithName.
func (mr *MockCategoryRepositoryMockRecorder) ExistsWithName(userId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsWithName", reflect.TypeOf((*MockCategoryRepository)(nil).ExistsWithName), userId, name)
}

// GetCategoryById mocks base method.
func (m *MockCategoryRepository) GetCategoryById(id uint64) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryById", id)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryById indicates an expected call of GetCategoryById.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoryById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryById", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoryById), id)
}

// GetCategoriesByUserId mocks base method.
func (m *MockCategoryRepository) GetCategoriesByUserId(userId uint64) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByUserId", userId)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByUserId indicates an expected call of GetCategoriesByUserId.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoriesByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByUserId", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoriesByUserId), userId)
}

// UpdateCategory mocks base method.
func (m *MockCategoryRepository) UpdateCategory(category *entity.Category) (*entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", category)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryRepositoryMockRecorder) UpdateCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateCategory), category)
}

// CategoryBelongsToUser mocks base method.
func (m *MockCategoryRepository) CategoryBelongsToUser(id, userId uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryBelongsToUser", id, userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CategoryBelongsToUser indicates an expected call of CategoryBelongsToUser.
func (mr *MockCategoryRepositoryMockRecorder) CategoryBelongsToUser(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryBelongsToUser", reflect.TypeOf((*MockCategoryRepository)(nil).CategoryBelongsToUser), id, userId)
}
